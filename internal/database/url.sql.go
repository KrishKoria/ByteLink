// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: url.sql

package database

import (
	"context"
)

const getLongURLByShortURL = `-- name: GetLongURLByShortURL :one
SELECT u.long_url
FROM mappings m
JOIN urls u ON m.url_id = u.id
WHERE m.short_url = ?
LIMIT 1
`

func (q *Queries) GetLongURLByShortURL(ctx context.Context, shortUrl string) (string, error) {
	row := q.db.QueryRowContext(ctx, getLongURLByShortURL, shortUrl)
	var long_url string
	err := row.Scan(&long_url)
	return long_url, err
}

const getLongURLByShortURLAndUserID = `-- name: GetLongURLByShortURLAndUserID :one
SELECT u.long_url
FROM mappings m
JOIN urls u ON m.url_id = u.id
WHERE m.short_url = ? AND m.user_id = ?
LIMIT 1
`

type GetLongURLByShortURLAndUserIDParams struct {
	ShortUrl string
	UserID   interface{}
}

func (q *Queries) GetLongURLByShortURLAndUserID(ctx context.Context, arg GetLongURLByShortURLAndUserIDParams) (string, error) {
	row := q.db.QueryRowContext(ctx, getLongURLByShortURLAndUserID, arg.ShortUrl, arg.UserID)
	var long_url string
	err := row.Scan(&long_url)
	return long_url, err
}

const getURLById = `-- name: GetURLById :one
SELECT id, long_url, created_at FROM urls WHERE id = ? LIMIT 1
`

func (q *Queries) GetURLById(ctx context.Context, id interface{}) (Url, error) {
	row := q.db.QueryRowContext(ctx, getURLById, id)
	var i Url
	err := row.Scan(&i.ID, &i.LongUrl, &i.CreatedAt)
	return i, err
}

const getURLIdByLongURL = `-- name: GetURLIdByLongURL :one
SELECT id FROM urls WHERE long_url = ? LIMIT 1
`

func (q *Queries) GetURLIdByLongURL(ctx context.Context, longUrl string) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, getURLIdByLongURL, longUrl)
	var id interface{}
	err := row.Scan(&id)
	return id, err
}

const saveURL = `-- name: SaveURL :exec
INSERT INTO urls (id, long_url) VALUES (?, ?)
`

type SaveURLParams struct {
	ID      interface{}
	LongUrl string
}

func (q *Queries) SaveURL(ctx context.Context, arg SaveURLParams) error {
	_, err := q.db.ExecContext(ctx, saveURL, arg.ID, arg.LongUrl)
	return err
}
