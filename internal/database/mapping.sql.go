// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: mapping.sql

package database

import (
	"context"
)

const countMappingsByUrlID = `-- name: CountMappingsByUrlID :one
SELECT COUNT(*) FROM mappings WHERE url_id = ?
`

func (q *Queries) CountMappingsByUrlID(ctx context.Context, urlID interface{}) (int64, error) {
	row := q.db.QueryRowContext(ctx, countMappingsByUrlID, urlID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteMapping = `-- name: DeleteMapping :exec
DELETE FROM mappings
WHERE short_url = ? AND user_id = ?
`

type DeleteMappingParams struct {
	ShortUrl string
	UserID   interface{}
}

func (q *Queries) DeleteMapping(ctx context.Context, arg DeleteMappingParams) error {
	_, err := q.db.ExecContext(ctx, deleteMapping, arg.ShortUrl, arg.UserID)
	return err
}

const deleteMappingByShortURLAndUserID = `-- name: DeleteMappingByShortURLAndUserID :exec
DELETE FROM mappings
WHERE short_url = ? AND user_id = ?
`

type DeleteMappingByShortURLAndUserIDParams struct {
	ShortUrl string
	UserID   interface{}
}

func (q *Queries) DeleteMappingByShortURLAndUserID(ctx context.Context, arg DeleteMappingByShortURLAndUserIDParams) error {
	_, err := q.db.ExecContext(ctx, deleteMappingByShortURLAndUserID, arg.ShortUrl, arg.UserID)
	return err
}

const getMappingByShortURLAndUserID = `-- name: GetMappingByShortURLAndUserID :one
SELECT m.id, m.short_url, u.long_url, m.user_id
FROM mappings m
JOIN urls u ON m.url_id = u.id
WHERE m.short_url = ? AND m.user_id = ?
LIMIT 1
`

type GetMappingByShortURLAndUserIDParams struct {
	ShortUrl string
	UserID   interface{}
}

type GetMappingByShortURLAndUserIDRow struct {
	ID       interface{}
	ShortUrl string
	LongUrl  string
	UserID   interface{}
}

func (q *Queries) GetMappingByShortURLAndUserID(ctx context.Context, arg GetMappingByShortURLAndUserIDParams) (GetMappingByShortURLAndUserIDRow, error) {
	row := q.db.QueryRowContext(ctx, getMappingByShortURLAndUserID, arg.ShortUrl, arg.UserID)
	var i GetMappingByShortURLAndUserIDRow
	err := row.Scan(
		&i.ID,
		&i.ShortUrl,
		&i.LongUrl,
		&i.UserID,
	)
	return i, err
}

const getMappingByUserIDAndUrlID = `-- name: GetMappingByUserIDAndUrlID :one
SELECT id, short_url, url_id, user_id
FROM mappings
WHERE user_id = ? AND url_id = ?
LIMIT 1
`

type GetMappingByUserIDAndUrlIDParams struct {
	UserID interface{}
	UrlID  interface{}
}

type GetMappingByUserIDAndUrlIDRow struct {
	ID       interface{}
	ShortUrl string
	UrlID    interface{}
	UserID   interface{}
}

func (q *Queries) GetMappingByUserIDAndUrlID(ctx context.Context, arg GetMappingByUserIDAndUrlIDParams) (GetMappingByUserIDAndUrlIDRow, error) {
	row := q.db.QueryRowContext(ctx, getMappingByUserIDAndUrlID, arg.UserID, arg.UrlID)
	var i GetMappingByUserIDAndUrlIDRow
	err := row.Scan(
		&i.ID,
		&i.ShortUrl,
		&i.UrlID,
		&i.UserID,
	)
	return i, err
}

const getMappingsByUserID = `-- name: GetMappingsByUserID :many
SELECT m.short_url, u.long_url
FROM mappings m
JOIN urls u ON m.url_id = u.id
WHERE m.user_id = ?
`

type GetMappingsByUserIDRow struct {
	ShortUrl string
	LongUrl  string
}

func (q *Queries) GetMappingsByUserID(ctx context.Context, userID interface{}) ([]GetMappingsByUserIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getMappingsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMappingsByUserIDRow
	for rows.Next() {
		var i GetMappingsByUserIDRow
		if err := rows.Scan(&i.ShortUrl, &i.LongUrl); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveMapping = `-- name: SaveMapping :exec
INSERT INTO mappings (id, url_id, short_url, user_id) VALUES (?, ?, ?, ?)
`

type SaveMappingParams struct {
	ID       interface{}
	UrlID    interface{}
	ShortUrl string
	UserID   interface{}
}

func (q *Queries) SaveMapping(ctx context.Context, arg SaveMappingParams) error {
	_, err := q.db.ExecContext(ctx, saveMapping,
		arg.ID,
		arg.UrlID,
		arg.ShortUrl,
		arg.UserID,
	)
	return err
}
