// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: mapping.sql

package database

import (
	"context"
)

const getLongURLByShortURL = `-- name: GetLongURLByShortURL :one
SELECT long_url
FROM mapping
WHERE short_url = ?
`

func (q *Queries) GetLongURLByShortURL(ctx context.Context, shortUrl string) (string, error) {
	row := q.db.QueryRowContext(ctx, getLongURLByShortURL, shortUrl)
	var long_url string
	err := row.Scan(&long_url)
	return long_url, err
}

const getLongURLByShortURLAndUserID = `-- name: GetLongURLByShortURLAndUserID :one
SELECT long_url
FROM mapping
WHERE short_url = ? AND userId = ?
`

type GetLongURLByShortURLAndUserIDParams struct {
	ShortUrl string
	Userid   interface{}
}

func (q *Queries) GetLongURLByShortURLAndUserID(ctx context.Context, arg GetLongURLByShortURLAndUserIDParams) (string, error) {
	row := q.db.QueryRowContext(ctx, getLongURLByShortURLAndUserID, arg.ShortUrl, arg.Userid)
	var long_url string
	err := row.Scan(&long_url)
	return long_url, err
}

const getMappingsByUserID = `-- name: GetMappingsByUserID :many
SELECT id, short_url, long_url
FROM mapping
WHERE userId = ?
`

type GetMappingsByUserIDRow struct {
	ID       interface{}
	ShortUrl string
	LongUrl  string
}

func (q *Queries) GetMappingsByUserID(ctx context.Context, userid interface{}) ([]GetMappingsByUserIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getMappingsByUserID, userid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMappingsByUserIDRow
	for rows.Next() {
		var i GetMappingsByUserIDRow
		if err := rows.Scan(&i.ID, &i.ShortUrl, &i.LongUrl); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveMapping = `-- name: SaveMapping :exec
INSERT INTO mapping (id, short_url, long_url, userId)
VALUES (?, ?, ?, ?)
`

type SaveMappingParams struct {
	ID       interface{}
	ShortUrl string
	LongUrl  string
	Userid   interface{}
}

func (q *Queries) SaveMapping(ctx context.Context, arg SaveMappingParams) error {
	_, err := q.db.ExecContext(ctx, saveMapping,
		arg.ID,
		arg.ShortUrl,
		arg.LongUrl,
		arg.Userid,
	)
	return err
}
